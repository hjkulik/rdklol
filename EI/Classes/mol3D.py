#!/usr/bin/env python
''' 
Created on 12/20/14

@author: EI
'''
# Written by Tim Ioannidis Mar 12 2015 for HJK Group
# Dpt of Chemical Engineering, MIT

##########################################################
######## Defines class of 3D molecules that  #############
########     will be used to manipulate      #############
########      coordinates within RDkit       #############
##########################################################

from math import sqrt 

def distance(R1,R2):
    dx = R1[0] - R2[0] 
    dy = R1[1] - R2[1] 
    dz = R1[2] - R2[2] 
    d = sqrt(dx**2+dy**2+dz**2)
    return d

class mol3D:
    """ Class mol3D represents a molecule with its coordinates for
    easy manipulation in 3D space """
    def __init__(self):
        """ Create a new molecule object """
        self.atoms = []
        self.natoms = 0 
        self.mass = 0 
        self.size = 0
    def coords(self):
        ss = '' # initialize returning string
        ss += "%d \n\n" % self.natoms
        for atom in self.atoms:
            xyz = atom.coords()
            ss += "%s \t%f\t%f\t%f\n" % (atom.sym,xyz[0],xyz[1],xyz[2])
        return ss
    def addatom(self,atom):
        # adds new atom
        self.atoms.append(atom)
        self.natoms += 1
        self.mass += atom.mass 
        self.size = self.molsize()
    def deleteatom(self,atomIdx):
        self.mass -= self.GetAtom(atomIdx).mass
        self.natoms -= 1
        for i in range(atomIdx,self.natoms):
            self.atoms[i] = self.atoms[i+1]
    def translate(self,dxyz):
        # translates molecules by dx,dy,dz
        for atom in self.atoms:
            atom.translate(dxyz)
    def GetAtom(self,idx):
        return self.atoms[idx]
    def GetAtoms(self):
        return self.atoms
    def centermass(self):
        # calculates center of mass of molecule
        # initialize center of mass and mol mass
        pmc = [0, 0, 0]  
        mmass = 0
        # loop over atoms in molecule
        for atom in self.atoms:
        # calculate center of mass (relative weight according to atomic mass)
            xyz = atom.coords()
            pmc[0] +=  xyz[0]*atom.mass
            pmc[1] +=  xyz[1]*atom.mass
            pmc[2] +=  xyz[2]*atom.mass
            mmass += atom.mass
        # normalize
        pmc[0] /= mmass
        pmc[1] /= mmass
        pmc[2] /= mmass
        return pmc
    def distance(self,mol):
        # gets distance between 2 molecules (centers of mass)
        cm0 = self.centermass()
        cm1 = mol.centermass()
        pmc = distance(cm0,cm1)
        return pmc
    def alignmol(self,mol,atom1,atom2):
        ''' aligns molecule 2(mol) based on atoms 1 and 2 '''
        # get vector of distance between atoms 1,2
        dv = atom2.distancev(atom1)
        # align molecule
        self.translate(dv)
    def molsize(self):
        # calculates maximum distance between center of mass and atoms
        maxd = 0
        cm = self.centermass()
        for atom in self.atoms:
            if distance(cm,atom.coords()) > maxd:
                maxd = distance(cm,atom.coords())
        return maxd
    def combine(self,mol):
        cmol = self 
        '''combines 2 molecules in self'''
        for atom in mol.atoms:
            cmol.addatom(atom)
        return cmol
    def overlapcheck(self,mol,silence):
        # checks for overlap with another molecule
        overlap = False
        for atom1 in mol.atoms:
            for atom0 in self.atoms:
                if (distance(atom1.coords(),atom0.coords()) < atom1.rad + atom0.rad):
                    overlap = True
                    if not (silence):
                        print "#############################################################"
                        print "!!!Molecules might be overlapping. Increase distance!!!"
                        print "#############################################################"
                    break
        return overlap
    def writexyz(self,filename):
        ''' writes xyz file for self molecule'''
        ss = '' # initialize returning string
        ss += "%d \nXYZ structure generated by mol3D Class, rdklol\n" % self.natoms
        for atom in self.atoms:
            xyz = atom.coords()
            ss += "%s \t%f\t%f\t%f\n" % (atom.sym,xyz[0],xyz[1],xyz[2])
        fname = filename.split('.xyz')[0]
        f=open(fname+'.xyz','w')
        f.write(ss)
        f.close()
    def writemxyz(self,mol,filename):
        ''' writes xyz file for 2 molecules'''
        ss = '' # initialize returning string
        ss += "%d \nXYZ structure generated by mol3D Class, rdklol\n" % (self.natoms+mol.natoms)
        for atom in self.atoms:
            xyz = atom.coords()
            ss += "%s \t%f\t%f\t%f\n" % (atom.sym,xyz[0],xyz[1],xyz[2])
        for atom in mol.atoms:
            xyz = atom.coords()
            ss += "%s \t%f\t%f\t%f\n" % (atom.sym,xyz[0],xyz[1],xyz[2])
        fname = filename.split('.xyz')[0]
        f=open(fname+'.xyz','w')
        f.write(ss)
        f.close()
    def __repr__(self):
        """ when calls mol3D object without attribute e.g. t """
        ss = "\nClass mol3D has the following methods:\n"
        for method in dir(self):
            if callable(getattr(self, method)):
                ss += method +'\n'
        return ss

